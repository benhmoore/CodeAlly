name: Shared CI Components

# This workflow is meant to be reused by other workflows
# It contains shared steps for CI processes

on:
    workflow_call:
        inputs:
            python-version:
                required: false
                type: string
                default: "3.11"
            run-tests:
                required: false
                type: boolean
                default: true
            run-lint:
                required: false
                type: boolean
                default: true
            upload-coverage:
                required: false
                type: boolean
                default: false
            build-package:
                required: false
                type: boolean
                default: false

env:
    CI: true # Set CI environment variable to skip interactive tests

jobs:
    shared-ci:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3

            - name: Set up Python ${{ inputs.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ inputs.python-version }}
                  cache: "pip"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-dev.txt
                  pip install -e .

            - name: Run tests
              if: ${{ inputs.run-tests }}
              run: |
                  pytest -xvs

            - name: Run tests with coverage
              if: ${{ inputs.upload-coverage }}
              run: |
                  pytest --cov=code_ally tests/

            - name: Upload coverage report
              if: ${{ inputs.upload-coverage }}
              uses: codecov/codecov-action@v3

            - name: Check and fix code formatting
              if: ${{ inputs.run-lint }}
              run: |
                  # First try to check without modifying
                  black --check . || {
                    echo "Formatting issues found, running Black to fix them..."
                    black .
                    git config --global user.name "GitHub Actions"
                    git config --global user.email "actions@github.com"
                    git add -A
                    git commit -m "Apply automatic formatting changes with Black" || echo "No changes to commit"
                  }

                  # Check imports and fix if needed
                  isort --check-only --profile black . || {
                    echo "Import order issues found, running isort to fix them..."
                    isort --profile black .
                    git add -A
                    git commit -m "Apply automatic import sorting with isort" || echo "No changes to commit"
                  }

            - name: Check code quality
              if: ${{ inputs.run-lint }}
              run: |
                  # Use a more permissive approach for existing codebase
                  pylint --disable=C0111,C0103,C0301,C0303,W0511,R0902,R0913 code_ally tests || echo "Pylint found issues, but continuing..."
                  mypy --ignore-missing-imports code_ally tests || echo "Type checking found issues, but continuing..."

            - name: Build package
              if: ${{ inputs.build-package }}
              run: |
                  # Update build tools to latest versions
                  python -m pip install --upgrade pip
                  pip install build>=1.0.0 twine>=6.0.0 setuptools>=68.0.0 wheel>=0.42.0

                  # Debug: Check Python and tool versions
                  python --version
                  pip list | grep -E "pip|build|twine|setuptools|wheel"

                  # Clean any previous build artifacts
                  rm -rf build/ dist/ *.egg-info/

                  # Build the package
                  python -m build

                  # List the built distribution files
                  echo "Built distributions:"
                  ls -la dist/

                  # Verify metadata in distributions with twine
                  twine check dist/*
